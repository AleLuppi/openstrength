rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Check if user is signed in
    function userSignedIn() {
      return request.auth != null;
    }

    // Get user role
    function getUserRole() {
      return userSignedIn()? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : "unknown";
    }

    // Check if user is admin
    function userIsAdmin() {
      return getUserRole() == "admin";
    }

    // Manage "users" collection
    match /users/{userId} {
      allow read: if true || userIsAdmin(); // TODO only proprietary or related person
      allow create: if (userSignedIn() && request.resource.data.role != "admin") || userIsAdmin(); // TODO user must be proprietary or coach, and ensure role is not assigned to admin
      allow update: if (request.resource.data.role != "admin") || userIsAdmin(); // TODO only proprietary if exist, otherwise related person, and ensure role is not assigned to admin
      allow delete: if userIsAdmin(); // admin only
    }

    // Manage "exercises" collection
    match /exercises/{exerciseId} {
      allow read: if (userSignedIn() && (request.auth.uid == resource.data.userId)) || userIsAdmin(); // only proprietary
      allow create: if (userSignedIn()) || userIsAdmin(); // TODO user must be coach (&& request.resource.data.role != "coach")
      allow update: if (userSignedIn() && (request.auth.uid == resource.data.userId)) || userIsAdmin(); // only proprietary
      allow delete: if userIsAdmin(); // admin only
    }

    // Avoid any other data manipulation
    match /{document=**} {
      allow read, write: if false;
    }
  }
}